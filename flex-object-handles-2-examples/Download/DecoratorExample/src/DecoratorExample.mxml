<?xml version="1.0" encoding="utf-8"?>
<!--
  This example extends the previous ConstraintsExample and adds in some decorators.  Decorators are functionality that
  draws extra stuff on the screen around the objects.

  We'll add the following decorators:
    Some guides that help you line objects up by drawing vertical or horizontal lines when things are aligned.
    The ability to link two objects so a line is draw between them.
    
  
  Look below for the comments starting with "Step 1", "Step 2", etc. to see what we changed.  

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="absolute" 
				creationComplete="init()">
				
	<mx:Script>
		<![CDATA[
			import com.roguedevelopment.objecthandles.decorators.AlignmentDecorator;
			import com.roguedevelopment.objecthandles.decorators.DecoratorManager;
			import com.roguedevelopment.objecthandles.constraints.MaintainProportionConstraint;
			import com.roguedevelopment.objecthandles.constraints.SizeConstraint;
			import com.roguedevelopment.objecthandles.constraints.MovementConstraint;
			import com.roguedevelopment.objecthandles.ObjectHandlesSelectionManager;
			import com.roguedevelopment.objecthandles.HandleRoles;
			import com.roguedevelopment.objecthandles.HandleDescription;
			import mx.core.IUIComponent;
			import mx.graphics.ImageSnapshot;
			import mx.events.DragEvent;
			import mx.core.DragSource;
			import mx.managers.DragManager;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import com.roguedevelopment.objecthandles.ObjectHandles;
			
			protected var dataModel:DataModel = new DataModel();
			protected var controller:Controller = new Controller( dataModel );
			
			
			
			protected var objectHandles:ObjectHandles;
			
			protected var textHandles:Array;
			
			protected var rectangleConstraints:Array = [];
			protected var carConstraints:Array = [];
			protected var textConstraints:Array = [];
			
			/*
			  Step 1
			  
			  Decorators need a decoratorManager, we'll store it here.  This is the object
			  that listens for various ObjectHandles events and calls the individual decorator
			  methods.
			    
			*/
			protected var decoratorManager:DecoratorManager;
			
			/*
			  Step 2
			  
			  We need something for the decorators to draw on.  Here's where we'll store that.
			*/
			protected var decoratorLayer:Sprite;
			  
			  
			
			
			/**
			 * Starts the drag operation when the mouse is down on our preview component
			 * on the left.
			 * 
			 **/
			protected function beginDrag(event:MouseEvent, shapeType:String) : void
			{
				var sourceImage:Object = event.target;
				if(! sourceImage ) return;
				
				var source:DragSource = new DragSource();
				
				switch( shapeType )
				{
					case "rectangle":					
						source.addData("rectangle","shape"); 
						source.addData(new Point(event.localX,event.localY), "offset");
						DragManager.doDrag(rectangleSource,source,event );
						break;
					case "circle":					
						source.addData("circle","shape"); 
						source.addData(new Point(event.localX,event.localY), "offset");
						DragManager.doDrag(circleSource,source,event );
						break;
					case "car1":					
						source.addData("image","shape"); 
						source.addData("car1.png","sourceImage");
						source.addData(new Point(event.localX,event.localY), "offset");
						DragManager.doDrag(car1Source,source,event );
						break;
					case "car2":					
						source.addData("image","shape");
						source.addData("car2.png","sourceImage"); 
						source.addData(new Point(event.localX,event.localY), "offset");
						DragManager.doDrag(car2Source,source,event );
						break;
					case "text1":										
						source.addData("text","shape");
						source.addData(false,"scaleText");
						source.addData(new Point(event.localX,event.localY), "offset");
						DragManager.doDrag(text1source,source,event );
						break;						
					case "text2":										
						source.addData("text","shape");
						source.addData(true,"scaleText");
						source.addData(new Point(event.localX,event.localY), "offset");
						DragManager.doDrag(text2source,source,event );
						break;						
				}
			}
			
			/**
			 * Allow the object to be dropped onto the mainCanvas object.
			 * 
			 * Note, we should probably check the event.dragSource to make sure we
			 * can handle this type of object.
			 **/
			protected function onDragEnter(event:DragEvent):void
			{
				
				DragManager.acceptDragDrop( mainCanvas );						
			}

			/**
			 * Actually drops the object onto the mainCanvas.
			 * 
			 **/
			protected function onDragDrop(event:DragEvent):void
			{
				
				var offset:Point = event.dragSource.dataForFormat("offset") as Point; // First, grab the offset the mouse was on the preview
				var shapeType:String = event.dragSource.dataForFormat("shape") as String;
				
				switch( shapeType )
				{
					case "rectangle":							
						controller.addSquare( event.localX - offset.x, event.localY - offset.y, 100 , 100 ); // Then actually create the new rectangle taking into account that offset.
						break;
					case "circle":
						controller.addCircle(event.localX - offset.x, event.localY - offset.y, 100 , 25 );
						break;
					case "image":
						var sourceImage:String = event.dragSource.dataForFormat("sourceImage") as String;
						controller.addImage(event.localX - offset.x, event.localY - offset.y, 100 , 25 , sourceImage );
						break;
					case "text":
						var scaleText:Boolean = event.dragSource.dataForFormat("scaleText") as Boolean;
						controller.addText(event.localX - offset.x, event.localY - offset.y, 100 , 25 , scaleText );
						break;
				}
			}
			
			/**
			 * Call the controller and tell it to delete a square from the model.
			 * 
			 * In an "ideal" world there would probably be a mediator between the
			 * view and the controller that listens for events and passes them
			 * onto the controller, but lets keep this simple for now.
			 * 
			 * Note, we're not trying to delete the currently selected square or
			 * anything like that.
			 **/
			protected function deleteSquare():void
			{
				controller.deleteLastSquare();
			}			
			
			/**
			 * Step 9
			 * 
			 * Write the linkItems method.  We'll grab the list of currently selected items
			 * from object handles and pass.
			 * 
			 * See Controller.as for step 10
			 **/
			protected function linkItems() : void
			{
				controller.linkItems(objectHandles.selectionManager.currentlySelected);
				decoratorManager.updateNow(); // Force a redraw of the decorators.
			}
			
			/**
			 * Called from the creationComplete event (see the root MXML tag)
			 * 
			 * This method sets up our ObjectHandles instance and adds a listener to our data model.
			 **/
			protected function init() : void
			{
				/*
				  Since this is a View object, it should be watching the data model and updating itself
				  when it changed.  This MXML file is tasked with creating or removing display objects when
				  they're added or removed from the data model.  To do that, we'll create an event listener
				  on dataModel.rectangles
				*/
				dataModel.shapes.addEventListener(CollectionEvent.COLLECTION_CHANGE, onShapesChanged );

				/*
				  Step 3
				  
				  Create the decoratorLayer as a sprite and add it to our display list.
				*/
				decoratorLayer = new Sprite();
				mainCanvas.rawChildren.addChild( decoratorLayer );

				
				objectHandles 	= 	new ObjectHandles( mainCanvas );

				
				/*
				  Step 4
				  
				  Create the DecoratorManager.
				*/
				
				decoratorManager = new DecoratorManager( objectHandles, decoratorLayer );
				
				/*
				 Step 5
				 
				 Add an AlignmentDecorator - this draws lines when items are aligned.
				*/
				decoratorManager.addDecorator( new AlignmentDecorator() );
				
				/* 
				 Step 6
				 
				 We're going to create a custom decorator that draws lines between linked objects
				 on the screen.  To do that, we will 
				 	a) Modify our RectangleModel class to hold a list of links  (See RectangleModel.as for step 7)
				 	b) Add the ability to link items (See step 8 in this file)
				 	b) Write a custom decorator  (See LinkedDecorator for step 11)
				 	c) Add the decorator it to the manager. (Right below)
				*/
				decoratorManager.addDecorator( new LinkedDecorator() );

				
				var movementConstraint:MovementConstraint = new MovementConstraint();
				movementConstraint.minX = 0;
				movementConstraint.minY = 0;
				movementConstraint.maxX = mainCanvas.width ;
				movementConstraint.maxY = mainCanvas.height;
				
				objectHandles.addDefaultConstraint( movementConstraint );				
				objectHandles.addMultiSelectConstraint( movementConstraint );
				
				
			  
			    var sizeConstraint:SizeConstraint = new SizeConstraint();
			    sizeConstraint.minWidth = 20;
			    sizeConstraint.maxWidth = 300;
			    sizeConstraint.minHeight = 10;
			    sizeConstraint.maxHeight = 300;			    
			    				
				rectangleConstraints.push( sizeConstraint );
				
				
				
				
				var aspectRatioConstraint:MaintainProportionConstraint = new MaintainProportionConstraint();				
				carConstraints.push( aspectRatioConstraint );
				
				
				 
				 var textConstraint:TextObjectConstraint = new TextObjectConstraint();
				textConstraints.push(textConstraint);
				
				/*				 
				 				 
				 Create a custom set of handles by copying the default set, and then
				 adding on a MOVE handle.
				*/
				textHandles = objectHandles.defaultHandles.concat();
				textHandles.push( new HandleDescription( HandleRoles.MOVE, new Point(50,50), new Point(0,0)) );
			}
			
			protected function onShapesChanged( event:CollectionEvent ) : void
			{
				switch( event.kind  )
				{
					case CollectionEventKind.ADD:	addShapes( event.items );
													break;				
					case CollectionEventKind.REMOVE: removeShapes(event.items);
												     break;
					default:				
						/* For this simple application, we're only going to deal with adding and removing rectangles,
						   later examples will get more involved. */
				}
			}
			
			/**
			 * Removes rectangles from the display. 
			 * 
			 * This gets called when the model is changed and thigns are removed
			 * from dataModel.rectangles.
			 **/
			protected function removeShapes( shapes:Array ) : void
			{
				
				// Note, since ImageModel, and CircleModel descend from RectangleModel, we don't need
				// to special case this loop.  Im a more complex application, you might want a base
				// class or interface that explictly defines shapes on the screen.
				
				for each ( var rect:RectangleModel in shapes ) // the data models are passed in, so loop over them
				{
					// First, get the view object that corresponds to that data model
					var viewObject:IEventDispatcher = objectHandles.getDisplayForModel( rect );
					
					// Unregister from ObjectHandles so it doesn't try to modify it anymore, this
					// will also remove event listeners.
					objectHandles.unregisterComponent( viewObject );
					
					// Finally, actually remove it from the view.
					mainCanvas.removeChild( viewObject as DisplayObject );
					
				}
			}
			
			
			
			/**
			 * adds rectangles to the display. 
			 * 
			 * This gets called when the model is changes and thigns are added
			 * to dataModel.rectangles.
			 **/			
			protected function addShapes( shapes:Array ) : void
			{
				for each ( var shape:Object in shapes )
				{					
					
					if( shape is ImageModel )
					{
						addImageView( shape as ImageModel );
					}
					else if(shape is CircleModel )
					{
						addCircleView( shape as CircleModel );
					}
					else if( shape is TextModel )
					{
						addTextView( shape as TextModel );						
					}
					else if( shape is RectangleModel )
					{
						addRectangleView( shape as RectangleModel )
					}										
				}
			}
			
			
			
			protected function addTextView( text:TextModel ) : void
			{
				
				var newView:TextView = new TextView();
				newView.dataModel = text;
				
				/*
				  Here we're using a third parameter to registerComponent.  This
				  specifies a non-standard set of handles to add to this type of
				  object.
				  
				  When dealing with text, we want to be able to use the mouse to
				  select the text.  Because of that, we don't want the text area
				  to move around whenever we mouse-down.  By adding a MOVE handle
				  it tells ObjectHandles to move the component when that handle is
				  manipulated instead of when we click on the background of the object.
				  
				  See init() above to see how we create that textHandles variable.
				
				*/
				objectHandles.registerComponent( text, newView , textHandles,  true, textConstraints);								
				mainCanvas.addChild( newView );			
			}
			
			protected function addRectangleView( rect:RectangleModel ) : void
			{
				var newView:RectangleView2 = new RectangleView2();
				newView.dataModel = rect;
				objectHandles.registerComponent( rect, newView , null, true, rectangleConstraints);
				mainCanvas.addChild( newView );
			}
			
			protected function addCircleView( circle:CircleModel ) : void
			{
				var newView:CircleView = new CircleView(circle);		// This is a pure AS3 object instead of an MXML object and it's data model
																		// is passed into it's constructor.  		
				objectHandles.registerComponent( circle, newView);
				mainCanvas.addChild( newView );	
			}
			
			protected function addImageView( image:ImageModel ) : void
			{
				var newView:ImageView = new ImageView();
				newView.dataModel = image;
				objectHandles.registerComponent( image, newView  , null, true, carConstraints);
				mainCanvas.addChild( newView );				
			}			
			
		]]>
	</mx:Script>
	
	
	<mx:Canvas left="109" 
			right="0" top="0" 
			bottom="0" 
			backgroundColor="#FFFFFF" 
			id="mainCanvas"
			dragEnter="onDragEnter(event)"
			dragDrop="onDragDrop(event);"
			/>
		   
	<mx:Image source="rectangle.png" top="10" left="5" mouseDown="beginDrag(event,'rectangle')" id="rectangleSource" />
	<mx:Image source="circle.png" top="40" left="5" mouseDown="beginDrag(event,'circle')" id="circleSource" />
	<mx:Image source="car1.png" top="70" left="5" mouseDown="beginDrag(event,'car1')" id="car1Source" />
	<mx:Image source="car2.png" top="100" left="5" mouseDown="beginDrag(event,'car2')" id="car2Source" />

	<mx:Image source="text1.png" top="130" left="5" mouseDown="beginDrag(event,'text1')" id="text1source" />
	<mx:Image source="text2.png" top="160" left="5" mouseDown="beginDrag(event,'text2')" id="text2source" />
	
	<!--
	 Step 8
	 
	 Add a button to link items together.
	-->
	<mx:Button x="10" bottom="35" label="Link Items" width="91" click="linkItems()"/>
	<mx:Button x="10" bottom="10" label="Del Square" width="91" click="deleteSquare()"/>
	
</mx:Application>
